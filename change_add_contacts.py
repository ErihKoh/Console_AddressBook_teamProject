# ФУНКЦИИ ДЛЯ ОБРАБОТКИ ТЕЛЕФОНА
import re
import json
def sanitize_n_check_phone (phone): 
    # Функция принимает на вход телефон с кодом страны или без, удаляет из него лишние символы, проверяет на валидность. 
    # Если валиден - возвращает телефон в формате +380*********, иначе возвращает False
    def sanitize_phone_number(phone):
        # Убирает типичные лишние символы 
        new_phone = (
            phone.strip()
            .removeprefix("+")
            .replace("(", "")
            .replace(")", "")
            .replace("-", "")
            .replace(" ", "")
        )
        return new_phone


    
    def check_phone_number(new_phone): 
        #Функция проверяет валидность "нормализированного" номера и возвращает его в стандарте +380, или возвращает False если невалиден
        sanitized_phone =sanitize_phone_number(phone)
        for symbol in sanitized_phone: # должен содержать только цифры
            if symbol not in "0123456789": return False 
        if sanitized_phone[0:3] == "380" and  len(sanitized_phone) == 12: return "+" + str(sanitized_phone) # наинаеться с 380 и имеет длинну 12
        elif sanitized_phone[0:1] == "0" and len(sanitized_phone) == 10: return "+38" + str(sanitized_phone) #начинаться с 0 и имеет длинну 10 
        else: return False

    return check_phone_number(sanitize_phone_number(phone))
# ------------------------------------------------------------------------
def input_phone(): 
    # Дает возможность ввести телефон и проверяет его валидность. 
    # Если невалиден - ввод еще раз, Если валиден - возвращает валидный телефон
    phone = input("Введите телефон: ")
    if sanitize_n_check_phone(phone) == False:
        print("Вы ввели некоректный телефон, попробуйте еще раз ;)"); return input_phone()
    else: 
        return sanitize_n_check_phone(phone)
# ------------------------------------------------------------------------
def add_some_phones():
    # Возвращает список от одного и более валидных телефонов.
    # После коректного введения 1 телефона спросит, хочешь ли добавить еще. 
    # И, если ты уже ввел хотя бы 1 валидный номер, а потом захотел ввести еще, но ввел неправильно или передумал вводить,
    # Тебе будет предложено не вводить телефон и двинутся дальше вместо " Ты ввел неправильно, попробуй еще"
    phones_to_add = []
    phones_to_add.append(input_phone())
    print("Номер записан")
    while True:
        answer = input("Если хотите добавит еще 1 номер - введите его. Если хотите продолжить нажмите Enter: ")
        if answer == "":
            break
        else: 
            if sanitize_n_check_phone(answer):
                phones_to_add.append(sanitize_n_check_phone(answer))
                print("Номер записан")
            else: 
                print("Вы ввели невалидный телефон")
    return phones_to_add
# ---------------
# print(add_some_phones())



# //////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////

# Функция обработки адресса
# Просто дает возможность вводить или не вводить адресс. Проверки нет.
def wanna_enter_adress():
    answer = input("Введите адрес контакта и нажмите Enter. Что бы пропустить - нажмите Enter сразу: ") 
    if answer == "": return None
    else: print("Адресс добавлен"); return answer

# //////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////

# ФУНКЦИИ ДЛЯ ОБРАБОТКИ ЭМЕЙЛА
# 1. Дать возможность пропустить ввод емейла.
# 2. Проверка введенного емейла ( )

def is_email_correct(email):
    # Функция принимает введенный эмейл, проверяет его, если валиден - возвращает его, иначе - возвращает False
    # ------------------------------------------------------------------------

    check = re.match(r"[a-zA-Z._]{1}[a-zA-Z._0-9]+@[a-zA-Z]+\.[a-z]{2}[a-z]*", email)
    if check: return email
    return False
    # Критерии проверки:
    # 1. Все буквы только англ алфавита
    # 2. ПРЕФИКС (то что до @)
    # 2.1 начинаеться с латинской буквы, содержит любое число символов
    # 2.2 и может содержать любое число/букву включая нижнее подчеркивание
    # 3. СУФФИКС (то что после @) 
    # 3.1 Состоит из двух частей, разделенных точкой
    # 3.2 После точки должно быть минимум 2 символа
# ------------------------------------------------------------------------
def wanna_enter_email():
    # Функция ничего не принимает, возвращает либо валидное значение емейла, либо None
    # Функция дает возможность ввести эмейл или перейти дальше. В случае ошибки так же предложит пропустить или попробовать заново.
    answer = input("Введите email контакта и нажмите Enter. Что бы пропустить - сразу нажмите Enter: ")
    if answer == "": return None
    else: 
        if is_email_correct(answer): print("email добавлен"); return is_email_correct(answer)
        else: print("Вы ввели недействительный email."); return wanna_enter_email()

# print(wanna_enter_email())





# //////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////

# ФУНКЦИИ ДЛЯ ОБРАБОТКИ ДАТЫ РОЖДЕНИЯ
# 1. Дать возможность вводить или не вводить день рождения
# 2. Проверка на соответствие заданному формату даты
def is_date_correct(date):
    if re.match(r"(([0-2]{1}[0-9]{1})|([3]{1}[0-1])).(([0]{1}[0-9])|([1]{1}[0-2])).[0-9]{4}",date): return date 
    #валидный формат даты: 01.12.1976 
    return False
# print(is_date_correct("32.06.2339"))

def wanna_enter_birthday():
    answer = input("Введите день рождения в формате 01.09.1986 контакта и нажмите Enter. Что бы пропустить - сразу нажмите Enter: ")
    if answer == "": return None
    else: 
        if is_date_correct(answer): print("день рождения добавлен"); return is_date_correct(answer)
        else: print("Вы ввели недействительную дату."); return wanna_enter_birthday()



# //////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////

# Собранная функция добавления контакта
# Не принимает аргументов, возвращает словарь с проверенными значениями имени, телефона (телефонов), и по желанию - почта и день рождения
def add_contact():
    result = {}
    result["name"] = input("Введите имя контакта: ")
    result["address"] = wanna_enter_adress()
    result["phones"] = add_some_phones()
    result["email"] = wanna_enter_email()
    result["birthday"] = wanna_enter_birthday()
    try:
        with open ("contacts.json","r") as fh:
            unpacked = json.load(fh)
            # 1.1 если есть - сохранить прочитанный файл в переменную. к списку append новый контакт. и сохранить
            unpacked.append(result)
        with open ("contacts.json", "w") as fh:
            json.dump(unpacked,fh)
    except FileNotFoundError:
        # 1.2 если нету файла - создать новый файл с пустым списком внутри. далее - пункт 1.1
        with open ("contacts.json", "w") as fh:
            empty_list=[]
            json.dump(empty_list,fh)
        with open ("contacts.json","r") as fh:
            unpacked = json.load(fh)
            # 1.1 если есть - сохранить прочитанный файл в переменную. к списку append новый контакт. и сохранить
            unpacked.append(result)
        with open ("contacts.json", "w") as fh:
            json.dump(unpacked,fh)



    # return result

# print(add_contact())


# нужно добавить проверку,существует ли уже контакт с таким именем





# //////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////
# ФУНКЦИЯ ИЗМЕНЕНИЯ КОНТАКТА
# //////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////

# Суть функции:
# 0. Достает список контактов из json файла, сохраняет в переменную
# 1. Пользоватьель вводит имя контакта, который хочет изменить. 
# 2. Если запись не найдена - спрашиваеться, ввести еще раз или отменить выполнение функции.
# 3. Пользователю выводиться все поля контакта, и спрашиваеться, которое он хочет изменить.
# 4. Вызываеться функция изменения данного параметра
# 5. Снова выводяться все поля контакта с уже обновленным значением, спрашиваеться, нужно ли изменить что то еще 
# 6. Если нужно изменить что то еще - начинаеться пунки 3. 
# 7. Когда внесены все нужные правки - функция перезаписывает json файл с контактами



# 1. Пользоватьель вводит имя контакта, который хочет изменить. 
def search_contact(unpacked_contacts):
    # Функциия принимает распакованный список контактов и возвращает искомый контакт (по ключу "name") или False, если совпадений нет.
    search_for_name=input("Введите имя: ")
    for contact in unpacked_contacts:
        if contact["name"]==search_for_name:
            return contact
        return False
            
    

# 2. Если запись не найдена - можно, ввести еще раз или отменить выполнение функции.
def search_contact_cycle(unpacked_contacts):
   # Функциия принимает распакованный список контактов и возвращает искомый контакт (по ключу "name") или None, если человек выбрал прекратить поиск.
    while True:
        search_for_name = input("Введите имя контакта для изменения и Enter, чтобы прекратить нажмите только Enter: ")
        pos_in_list = 0
        if search_for_name == "": return False
        for contact in unpacked_contacts:
            if contact["name"]==search_for_name:
                return [contact,pos_in_list]
            pos_in_list+=1
        print("Контакт с таким именем не найден.")







# 3. Пользователю выводиться все поля контакта, и спрашиваеться, которое он хочет изменить.
# 4. Вызываеться функция изменения данного параметра
# 5. Спрашиваеться, нужно ли изменить что то еще 
# 6. Если нужно изменить что то еще - начинаеться пунки 3. 
def edit_contact_data(contact):

    # Принимает на вход контакт, найденный функцией search_contact_cycle, 
    # печатает поля контакта, и спрашивает, который нужно изменить.

    count = 0 # Эта часть кода отображает содержание контакта с нумерацией полей словаря
    for key,value in contact.items():
        count +=1
        print(f"{count}) {key}: {value}")
    #  просьба ввести номер параметра, который нужно изменить, изменение
    i_wanna_change = input("Введите цифру, например 1, нажмите Enter, просто Enter - что бы отменить.")
    if i_wanna_change == "1": contact["name"] = input("Введите новое имя контакта")
    if i_wanna_change == "2": contact["address"] = input("Введите новый адресс контакта")
    if i_wanna_change == "3": # здесь человек может либо добавить новый, либо заменить ссуществующий номер телефона
        def wanna_add_or_change_phone(): # Возвращает новый список телеофонов для этого контакта
            # Отображение всех телефонов контакта с порядковым номером 
            count = 0 
            for phones in contact["phones"]:
                count+=1
                print(f"{count}) {phones}")
            answer = input("Если хотите добавить новый - введите его, если хотите изменить существующий - введите его порядковый номер (например 1)")
            if len(answer) <= 2: # проверка что ввел порядковый номер
                contact["phones"][int(answer)-1] = input_phone()  # Заменяет телефон в списке (с учетом того что список начинаеться с 0 а не 1)
            else:
                contact["phones"].append(input_phone) # если ввел не порядковый номер, то предполагаем, телефон. 
            return contact["phones"]
        contact["phones"] = wanna_add_or_change_phone()

    if i_wanna_change == "4": contact["email"]= wanna_enter_email()
    if i_wanna_change == "5": contact["birthday"]= wanna_enter_birthday()
    if i_wanna_change =="": print("Вы завершили редактирование контакта"); return contact

    def wanna_change_smth_else():
        if input("Изменения внесены. Если Хотите изменить что то еще - нажмите любой символ и Enter, что бы выйти - сразу Enter.") !="":
            return edit_contact_data(contact)
    wanna_change_smth_else()
    return contact
# print(edit_contact_data(contact))



# //////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////
# //////////////////////////////////////////////////////////////////
# СОБРАННАЯ ФУНКЦИЯ ИЗМЕНЕНИЯ КОНТАКТА
# 1. читает из файла json и записывает в переменную unpacked_contacts содержимое списком
# 2. ищет в unpacked_contacts словарь с ключом "name" == вводу пользователя. И запоминает его порядковый номер в списке.
# 3. Изменяет нужные поля так как хочет пользователь
# 4. в unpacked_contacts заменяет елемент под запомненным порядковым номером но обновленный контакт
# 5. сохраняет unpacked_contacts обратно в json файл

def read_contacts():
    # with open ("contacts.json", "w") as fh:
    #     json.dump(to_save,fh)
    try:
        with open("contacts.json","r") as fh: #        <---------------------- !!!!!!!!! НУЖНО ЗАМЕНИТЬ НАЗВАНИЕ ФАЙЛА НА АКТУАЛЬНОЕ!!!!!!!!
            unpacked_contacts = json.load(fh)
            return unpacked_contacts
    except FileNotFoundError:
        return False
        







def change_contact():
    unpacked_contacts = read_contacts()
    # print(unpacked_contacts)
    if unpacked_contacts == False: 
        print("Файл не найден. Скорее всего вы еще не создали ни одного контакта, поэтому нечего редактировать.")
        return None
    found_contact_data = search_contact_cycle(unpacked_contacts) # возвращает список [словарь искомого контактаю, порядковый номер контакта] или None
    # print(found_contact_data)
    if found_contact_data == False:
        print("Поиск контакта прекращен.")
        return None
    edited_contact = edit_contact_data(found_contact_data[0]) # внесение желаемых изменений в найденный экземпляр контакта
    # print(edited_contact)
    unpacked_contacts[found_contact_data[1]] = edited_contact
    # print(unpacked_contacts) 
    # перед сохранением вписываем измененный контакт на место старого, по его индексу
    with open ("contacts.json", "w") as fh:
        json.dump(unpacked_contacts,fh)
    print("Редактирование завершено")





# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
# ДЛЯ ТЕСТА РАБОТЫ
# add_contact() # - Вызов функции добавления контакта

# change_contact() # - Вызов функции изменения контакта

# with open ("contacts.json","r") as fh: # - Показать содержимое файла
#     unpacked = json.load(fh)
#     print(unpacked)


